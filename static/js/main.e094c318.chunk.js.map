{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx","theme.ts"],"names":["alignMap","left","center","right","valignMap","top","bottom","PreserveRatioContext","createContext","scale","PreserveRatio","align","children","maxHeight","maxScale","maxWidth","safeMode","valign","innerRef","useRef","outerRef","useState","width","height","innerRect","setInnerRect","outerRect","setOuterRect","useMemo","dynamicScale","Math","Number","applyResize","entries","entry","useEffect","observer","ResizeObserver","Array","window","justifyContent","alignItems","ref","style","border","display","margin","overflow","padding","transform","transformOrigin","value","PropTypes","DefaultContent","backgroundColor","ConstrainedContent","useContext","face","fontSize","transition","ContextContent","Intl","NumberFormat","maximumSignificantDigits","format","App","alignment","setAlignment","contentResizeRect","setContentResizeRect","size","href","my","w","onClick","mr","min","max","onChange","v","parseInt","toString","textAlign","split","ReactDOM","render","theme","extendTheme","components","Alert","baseStyle","container","maxW","Button","Heading","sizes","lg","mt","mb","List","Table","table","td","Text","document","getElementById"],"mappings":"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","file":"static/js/main.e094c318.chunk.js","sourcesContent":["import React, {\n  createContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\nimport * as PropTypes from 'prop-types'\n\ninterface Context {\n  scale: number\n}\n\ninterface Rect {\n  height: number\n  width: number\n}\n\nconst alignMap = {\n  left: 'flex-start',\n  center: 'space-around',\n  right: 'flex-end'\n}\n\nconst valignMap = {\n  top: 'flex-start',\n  center: 'center',\n  bottom: 'flex-end'\n}\n\nexport const PreserveRatioContext = createContext<Context>({ scale: 1 })\nexport function PreserveRatio({\n  align,\n  children,\n  maxHeight,\n  maxScale,\n  maxWidth,\n  safeMode,\n  valign\n}: PropTypes.InferProps<typeof PreserveRatio.propTypes>) {\n  const innerRef = useRef(null)\n  const outerRef = useRef(null)\n\n  const [innerRect, setInnerRect] = useState<Rect>({ width: 0, height: 0 })\n  const [outerRect, setOuterRect] = useState<Rect>({ width: 0, height: 0 })\n\n  const scale = useMemo(() => {\n    let dynamicScale = Math.min(\n      outerRect.width / innerRect.width,\n      outerRect.height / innerRect.height\n    )\n\n    return Math.min(\n      dynamicScale,\n      maxScale || Number.MAX_VALUE,\n      (maxHeight || Number.MAX_VALUE) / innerRect.height,\n      (maxWidth || Number.MAX_VALUE) / innerRect.width\n    )\n  }, [innerRect, maxScale, maxHeight, maxWidth, outerRect])\n\n  const applyResize = (entries: any) =>\n    entries.forEach((entry: any) => {\n      switch (entry.target) {\n        case innerRef.current:\n          setInnerRect(entry.contentRect)\n          break\n        case outerRef.current:\n          setOuterRect(entry.contentRect)\n          break\n      }\n    })\n\n  useEffect(() => {\n    const observer = new ResizeObserver((entries: any) => {\n      if (!Array.isArray(entries)) {\n        return\n      }\n\n      if (safeMode) {\n        window.requestAnimationFrame(() => {\n          applyResize(entries)\n        })\n      } else {\n        applyResize(entries)\n      }\n    })\n\n    observer.observe(innerRef.current!)\n    observer.observe(outerRef.current!)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [safeMode])\n\n  const justifyContent = alignMap[align || ''] || 'space-around'\n  const alignItems = valignMap[valign || ''] || 'center'\n\n  return (\n    <div\n      ref={outerRef}\n      style={{\n        height: '100%',\n        width: '100%',\n        alignItems,\n        border: 'none',\n        display: 'flex',\n        justifyContent,\n        margin: 0,\n        overflow: 'hidden',\n        padding: 0\n      }}\n    >\n      <div\n        ref={innerRef}\n        style={{\n          transform: `scale(${scale})`,\n          transformOrigin: `${valign || 'center'} ${align || 'center'}`\n        }}\n      >\n        <PreserveRatioContext.Provider value={{ scale }}>\n          {children}\n        </PreserveRatioContext.Provider>\n      </div>\n    </div>\n  )\n}\n\nPreserveRatio.propTypes = {\n  align: PropTypes.oneOf(['left', 'center', 'right']),\n  children: PropTypes.node.isRequired,\n  maxHeight: PropTypes.number,\n  maxScale: PropTypes.number,\n  maxWidth: PropTypes.number,\n  safeMode: PropTypes.bool,\n  valign: PropTypes.oneOf(['top', 'center', 'bottom'])\n}\n","import React, { useContext, useState } from 'react'\nimport { ResizableBox } from 'react-resizable'\n\nimport { PreserveRatio, PreserveRatioContext } from 'react-preserve-ratio'\nimport {\n  Button,\n  Code,\n  Flex,\n  Heading,\n  Link,\n  ListItem,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Radio,\n  RadioGroup,\n  Spacer,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Thead,\n  Tr,\n  UnorderedList\n} from '@chakra-ui/react'\n\ninterface Rect {\n  height: number\n  width: number\n}\n\nconst DefaultContent = () => (\n  <div\n    style={{\n      alignItems: 'center',\n      backgroundColor: '#ddffdd',\n      display: 'flex',\n      height: '240px',\n      justifyContent: 'center',\n      width: '320px'\n    }}\n  >\n    Hello, world!\n  </div>\n)\n\nconst ConstrainedContent = () => {\n  const { scale } = useContext(PreserveRatioContext)\n\n  let backgroundColor = '#ddffdd'\n  let face = '^o^'\n\n  if (scale > 1.49) {\n    backgroundColor = '#ffdddd'\n    face = '>_<'\n  } else if (scale > 1.1) {\n    backgroundColor = '#ffffdd'\n    face = 'O_O'\n  } else if (scale > 0.5) {\n    face = '^_^'\n  }\n\n  return (\n    <div\n      style={{\n        alignItems: 'center',\n        backgroundColor,\n        display: 'flex',\n        fontSize: '2em',\n        height: '240px',\n        justifyContent: 'center',\n        width: '320px',\n        transition: 'background 200ms'\n      }}\n    >\n      <code>{face}</code>\n    </div>\n  )\n}\n\nconst ContextContent = () => {\n  const { scale } = useContext(PreserveRatioContext)\n\n  return (\n    <div\n      style={{\n        alignItems: 'center',\n        backgroundColor: '#ddffdd',\n        display: 'flex',\n        fontSize: '4em',\n        height: '240px',\n        justifyContent: 'center',\n        width: '320px',\n        transition: 'background 200ms'\n      }}\n    >\n      {new Intl.NumberFormat('en-US', { maximumSignificantDigits: 2 }).format(\n        scale\n      )}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [alignment, setAlignment] = useState('center center')\n  const [contentResizeRect, setContentResizeRect] = useState<Rect>({\n    width: 320,\n    height: 240\n  })\n\n  return (\n    <div\n      style={{\n        margin: '1em'\n      }}\n    >\n      <Heading size='xl'>\n        Examples:{' '}\n        <Link href='https://github.com/dobs/react-preserve-ratio'>\n          react-preserve-ratio\n        </Link>\n      </Heading>\n      <Heading size='lg'>Basic Example</Heading>\n      <Text fontSize='md'>\n        Try resizing the box below and notice how content automatically scales\n        while maintaining its ratio.\n      </Text>\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio>\n          <DefaultContent />\n        </PreserveRatio>\n      </ResizableBox>\n\n      <Heading size='lg'>\n        Constraints Example\n      </Heading>\n      <Text>\n        This time the <Code>maxScale</Code> option is set to <Code>1.5</Code>,\n        limiting content to 150% its initial scale.\n      </Text>\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio maxScale={1.5}>\n          <ConstrainedContent />\n        </PreserveRatio>\n      </ResizableBox>\n      <Text>There are a few different constraint options:</Text>\n      <UnorderedList>\n        <ListItem>\n          <Code>maxScale</Code>: A number indicating the maximum scale for\n          content relative to their real size.\n        </ListItem>\n        <ListItem>\n          <Code>maxHeight</Code>: A number indicating the maximum height of\n          content, in pixels.\n        </ListItem>\n        <ListItem>\n          <Code>maxWidth</Code>: A number indicating the maximum width of\n          content, in pixels.\n        </ListItem>\n      </UnorderedList>\n      <Text>\n        Minimum constraints are more container-dependent an so aren't currently\n        covered by the component in favour of letting users specify their own{' '}\n        <Code>min-width</Code> and <Code>min-height</Code> on the container.\n      </Text>\n\n      <Heading size='lg'>\n        Content Resizing Example\n      </Heading>\n      <Text>\n        Content is also automatically scaled when content dimensions change.\n      </Text>\n      <Flex my={2} w='640px'>\n        <Button\n          onClick={() => setContentResizeRect({ width: 320, height: 240 })}\n        >\n          Default\n        </Button>\n        <Button\n          onClick={() => setContentResizeRect({ width: 480, height: 240 })}\n        >\n          Wide\n        </Button>\n        <Button\n          onClick={() => setContentResizeRect({ width: 240, height: 320 })}\n        >\n          Tall\n        </Button>\n        <Spacer />\n        <NumberInput\n          w={20}\n          mr={2}\n          min={1}\n          max={999}\n          value={contentResizeRect.width}\n          onChange={(v) =>\n            setContentResizeRect({\n              width: parseInt(v),\n              height: contentResizeRect.height\n            })\n          }\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n        <NumberInput\n          w={20}\n          min={1}\n          max={999}\n          value={contentResizeRect.height}\n          onChange={(v) =>\n            setContentResizeRect({\n              width: contentResizeRect.width,\n              height: parseInt(v)\n            })\n          }\n        >\n          <NumberInputField />\n          <NumberInputStepper>\n            <NumberIncrementStepper />\n            <NumberDecrementStepper />\n          </NumberInputStepper>\n        </NumberInput>\n      </Flex>\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ddffdd',\n              display: 'flex',\n              height: `${contentResizeRect.height}px`,\n              justifyContent: 'center',\n              transition: 'width 200ms, height 200ms',\n              width: `${contentResizeRect.width}px`\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableBox>\n\n      <Heading size='lg'>\n        Alignment Example\n      </Heading>\n      <Text>\n        Components also support horizontal and vertical alignment via{' '}\n        <Code>align</Code> and <Code>valign</Code> respectively.\n      </Text>\n\n      <RadioGroup\n        my={2}\n        onChange={(v) => setAlignment(v.toString())}\n        value={alignment}\n      >\n        <Table w='320px'>\n          <Thead>\n            <Tr>\n              <Td></Td>\n              <Td>Left</Td>\n              <Td>Center</Td>\n              <Td>Right</Td>\n            </Tr>\n          </Thead>\n          <Tbody>\n            <Tr>\n              <Td textAlign='right'>Top</Td>\n              <Td>\n                <Radio value='top left' />\n              </Td>\n              <Td>\n                <Radio value='top center' />\n              </Td>\n              <Td>\n                <Radio value='top right' />\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody>\n            <Tr>\n              <Td textAlign='right'>Center</Td>\n              <Td>\n                <Radio value='center left' />\n              </Td>\n              <Td>\n                <Radio value='center center' />\n              </Td>\n              <Td>\n                <Radio value='center right' />\n              </Td>\n            </Tr>\n          </Tbody>\n          <Tbody>\n            <Tr>\n              <Td textAlign='right'>Bottom</Td>\n              <Td>\n                <Radio value='bottom left' />\n              </Td>\n              <Td>\n                <Radio value='bottom center' />\n              </Td>\n              <Td>\n                <Radio value='bottom right' />\n              </Td>\n            </Tr>\n          </Tbody>\n        </Table>\n      </RadioGroup>\n\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio\n          align={alignment.split(' ')[1]}\n          valign={alignment.split(' ')[0]}\n        >\n          <DefaultContent />\n        </PreserveRatio>\n      </ResizableBox>\n\n      <Heading size='lg'>\n        Safe Mode Example\n      </Heading>\n      <Text>\n        If elements are resized too quickly it can result in non-user-impacting\n        errors. Where this could become a problem is if you're using a frontend\n        error tracking service it could create a lot of noise.\n      </Text>\n      <Text>\n        To help mitigate, there's a <Code>safeMode</Code> prop that introduces a\n        small amount of user-visible latency but in an attempt to reduce these\n        errors.\n      </Text>\n      <Text>\n        See{' '}\n        <Link href='https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded'>\n          this StackOverflow thread\n        </Link>{' '}\n        for more detail.\n      </Text>\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio safeMode>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ddffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableBox>\n\n      <Heading size='lg'>\n        Context Example\n      </Heading>\n      <Text>\n        <Code>PreserveRatioContext</Code> for child components that care about\n        the current scale.\n      </Text>\n      <ResizableBox width={640} height={240}>\n        <PreserveRatio safeMode>\n          <ContextContent />\n        </PreserveRatio>\n      </ResizableBox>\n\n      <Heading size='lg'>\n        Window Scaling Example\n      </Heading>\n      <Text>\n        A typical use case is having content scale to fill the current window,\n        for example when displaying a slide as part of a slide show.\n      </Text>\n      <Text>\n        The box below should scale to match the window size. Try resizing your\n        window (or rotating your device) and see how the inner content scales to\n        fit.\n      </Text>\n      <div\n        style={{\n          border: '1px dotted rgba(0, 0, 0, 0.2)',\n          height: 'calc(100vh - 2em)',\n          width: '100%'\n        }}\n      >\n        <PreserveRatio>\n          <DefaultContent />\n        </PreserveRatio>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react'\n\nimport theme from './theme'\nimport App from './App'\n\nReactDOM.render(\n  <ChakraProvider theme={extendTheme(theme)}>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n)\n","export default {\n  components: {\n    Alert: {\n      baseStyle: {\n        container: {\n          my: 4,\n          maxW: '640px'\n        }\n      }\n    },\n    Button: {\n      baseStyle: {\n        mr: 2\n      }\n    },\n    Heading: {\n      sizes: {\n        lg: {\n          mt: 10,\n          mb: 3\n        }\n      }\n    },\n    List: {\n      baseStyle: {\n        maxW: '640px'\n      }\n    },\n    Table: {\n      baseStyle: {\n        table: {\n          maxW: '640px'\n        },\n        td: {\n          textAlign: 'center'\n        }\n      }\n    },\n    Text: {\n      baseStyle: {\n        my: 3,\n        maxW: '640px'\n      }\n    }\n  }\n}\n"],"sourceRoot":""}