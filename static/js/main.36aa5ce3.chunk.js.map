{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["baseStyles","alignItems","border","display","justifyContent","margin","overflow","padding","PreserveRatio","children","maxHeight","maxScale","maxWidth","safeMode","innerRef","useRef","outerRef","useState","width","height","innerRect","setInnerRect","outerRect","setOuterRect","scale","useMemo","dynamicScale","Math","Number","applyResize","entries","entry","useEffect","observer","ResizeObserver","Array","window","ref","style","transform","ResizableContainer","resize","PropTypes","App","contentResizeRect","setContentResizeRect","backgroundColor","onClick","transition","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36aa5ce3.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport * as PropTypes from 'prop-types';\n\ninterface Rect {\n  height: number;\n  width: number;\n}\n\nconst baseStyles = {\n  alignItems: 'center',\n  border: 'none',\n  display: 'flex',\n  justifyContent: 'space-around',\n  margin: 0,\n  overflow: 'hidden',\n  padding: 0,\n};\n\nexport function PreserveRatio({\n  children,\n  maxHeight,\n  maxScale,\n  maxWidth,\n  safeMode,\n}: PropTypes.InferProps<typeof PreserveRatio.propTypes>) {\n  const innerRef = useRef(null);\n  const outerRef = useRef(null);\n\n  const [innerRect, setInnerRect] = useState<Rect>({width: 0, height: 0});\n  const [outerRect, setOuterRect] = useState<Rect>({width: 0, height: 0});\n\n  const scale = useMemo(() => {\n    let dynamicScale = Math.min(\n      outerRect.width / innerRect.width,\n      outerRect.height / innerRect.height\n    );\n\n    return Math.min(\n      dynamicScale,\n      maxScale || Number.MAX_VALUE,\n      (maxHeight || Number.MAX_VALUE) / innerRect.height,\n      (maxWidth || Number.MAX_VALUE)/ innerRect.width\n    );\n  }, [innerRect, maxScale, maxHeight, maxWidth, outerRect]);\n\n  const applyResize = (entries: any) => entries.forEach((entry: any) => {\n    switch (entry.target) {\n      case innerRef.current:\n        setInnerRect(entry.contentRect);\n        break;\n      case outerRef.current:\n        setOuterRect(entry.contentRect);\n        break;\n    }\n  });\n\n  useEffect(() => {\n    const observer = new ResizeObserver((entries: any) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      if (safeMode) {\n        window.requestAnimationFrame(() => {\n          applyResize(entries);\n        });\n      } else {\n        applyResize(entries);\n      }\n    });\n\n    observer.observe(innerRef.current!);\n    observer.observe(outerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [safeMode]);\n\n  return (\n    <div\n      ref={outerRef}\n      style={{\n        height: '100%',\n        width: '100%',\n        ...baseStyles,\n      }}\n    >\n      <div\n        ref={innerRef}\n        style={{\n          transform: `scale(${scale})`,\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nPreserveRatio.propTypes = {\n  children: PropTypes.node.isRequired,\n  maxHeight: PropTypes.number,\n  maxScale: PropTypes.number,\n  maxWidth: PropTypes.number,\n  safeMode: PropTypes.bool,\n};\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport { PreserveRatio } from 'react-preserve-ratio'\n\ninterface Rect {\n  height: number\n  width: number\n}\n\nfunction ResizableContainer({\n  children\n}: PropTypes.InferProps<typeof ResizableContainer.propTypes>) {\n  return (\n    <div\n      style={{\n        border: '1px dotted rgba(0, 0, 0, 0.2)',\n        display: 'block',\n        height: '240px',\n        overflow: 'hidden',\n        resize: 'both',\n        width: '640px'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nResizableContainer.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nconst App = () => {\n  const [contentResizeRect, setContentResizeRect] = useState<Rect>({\n    width: 320,\n    height: 240\n  })\n  return (\n    <div\n      style={{\n        margin: '1em'\n      }}\n    >\n      <h1>Examples: react-preserve-scale</h1>\n      <h2>Basic Example</h2>\n      <p>\n        Try resizing the box below and notice how content automatically scales\n        while maintaining its ratio.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Constraints Example</h2>\n      <p>\n        This time the <code>maxScale</code> option is set to <code>2</code>,\n        limiting content to 2x its initial scale.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio maxScale={2}>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n      <p>There are a few different constraint options:</p>\n      <ul>\n        <li>\n          <code>maxScale</code>: A number indicating the maximum scale for\n          content relative to their real size.\n        </li>\n        <li>\n          <code>maxHeight</code>: A number indicating the maximum height of\n          content, in pixels.\n        </li>\n        <li>\n          <code>maxWidth</code>: A number indicating the maximum width of\n          content, in pixels.\n        </li>\n      </ul>\n      <p>\n        Minimum constraints are more container-dependent an so aren't currently\n        covered by the component in favour of letting users specify their own{' '}\n        <code>min-width</code> and <code>min-height</code> on the container.\n      </p>\n\n      <h2>Content Resizing Example</h2>\n      <p>\n        Content is also automatically scaled when content dimensions change. Try\n        using the buttons below to change the content box's size.\n      </p>\n      <p>\n        <button\n          onClick={() => setContentResizeRect({ width: 320, height: 240 })}\n        >\n          Default\n        </button>\n        <button\n          onClick={() => setContentResizeRect({ width: 480, height: 240 })}\n        >\n          Wide\n        </button>\n        <button\n          onClick={() => setContentResizeRect({ width: 240, height: 320 })}\n        >\n          Tall\n        </button>\n      </p>\n      <ResizableContainer>\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: `${contentResizeRect.height}px`,\n              justifyContent: 'center',\n              transition: 'width 200ms, height 200ms',\n              width: `${contentResizeRect.width}px`\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Safe Mode Example</h2>\n      <p>\n        If elements are resized too quickly it can result in non-user-impacting\n        errors. Where this could become a problem is if you're using a frontend\n        error tracking service it could create a lot of noise.\n      </p>\n      <p>\n        To help mitigate, there's a <code>safeMode</code> prop that introduces a\n        small amount of user-visible latency but in an attempt to reduce these\n        errors.\n      </p>\n      <p>\n        See{' '}\n        <a href='https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded'>\n          this StackOverflow thread\n        </a>{' '}\n        for more detail.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio safeMode>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Window Scaling Example</h2>\n      <p>\n        A typical use case is having content scale to fill the current window,\n        for example when displaying a slide as part of a slide show.\n      </p>\n      <p>\n        The box below should scale to match the window size. Try resizing your\n        window (or rotating your device) and see how the inner content scales to\n        fit.\n      </p>\n      <div\n        style={{\n          border: '1px dotted rgba(0, 0, 0, 0.2)',\n          height: 'calc(100vh - 2em)',\n          width: '100%'\n        }}\n      >\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}