{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["alignMap","left","center","right","valignMap","top","bottom","PreserveRatio","align","children","maxHeight","maxScale","maxWidth","safeMode","valign","innerRef","useRef","outerRef","useState","width","height","innerRect","setInnerRect","outerRect","setOuterRect","scale","useMemo","dynamicScale","Math","Number","applyResize","entries","entry","useEffect","observer","ResizeObserver","Array","window","justifyContent","alignItems","ref","style","border","display","margin","overflow","padding","transform","transformOrigin","ResizableContainer","resize","PropTypes","App","alignment","setAlignment","contentResizeRect","setContentResizeRect","backgroundColor","onClick","type","max","min","value","onChange","e","parseInt","target","transition","className","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72e3bf04.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport * as PropTypes from 'prop-types';\n\ninterface Rect {\n  height: number;\n  width: number;\n}\n\nconst alignMap = {\n  left: 'flex-start',\n  center: 'space-around',\n  right: 'flex-end',\n}\n\nconst valignMap = {\n  top: 'flex-start',\n  center: 'center',\n  bottom: 'flex-end',\n}\nexport function PreserveRatio({\n  align,\n  children,\n  maxHeight,\n  maxScale,\n  maxWidth,\n  safeMode,\n  valign,\n}: PropTypes.InferProps<typeof PreserveRatio.propTypes>) {\n  const innerRef = useRef(null);\n  const outerRef = useRef(null);\n\n  const [innerRect, setInnerRect] = useState<Rect>({width: 0, height: 0});\n  const [outerRect, setOuterRect] = useState<Rect>({width: 0, height: 0});\n\n  const scale = useMemo(() => {\n    let dynamicScale = Math.min(\n      outerRect.width / innerRect.width,\n      outerRect.height / innerRect.height\n    );\n\n    return Math.min(\n      dynamicScale,\n      maxScale || Number.MAX_VALUE,\n      (maxHeight || Number.MAX_VALUE) / innerRect.height,\n      (maxWidth || Number.MAX_VALUE)/ innerRect.width\n    );\n  }, [innerRect, maxScale, maxHeight, maxWidth, outerRect]);\n\n  const applyResize = (entries: any) => entries.forEach((entry: any) => {\n    switch (entry.target) {\n      case innerRef.current:\n        setInnerRect(entry.contentRect);\n        break;\n      case outerRef.current:\n        setOuterRect(entry.contentRect);\n        break;\n    }\n  });\n\n  useEffect(() => {\n    const observer = new ResizeObserver((entries: any) => {\n      if (!Array.isArray(entries)) {\n        return;\n      }\n\n      if (safeMode) {\n        window.requestAnimationFrame(() => {\n          applyResize(entries);\n        });\n      } else {\n        applyResize(entries);\n      }\n    });\n\n    observer.observe(innerRef.current!);\n    observer.observe(outerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [safeMode]);\n\n  const justifyContent = alignMap[align || ''] || 'space-around';\n  const alignItems = valignMap[valign || ''] || 'center';\n\n  return (\n    <div\n      ref={outerRef}\n      style={{\n        height: '100%',\n        width: '100%',\n        alignItems,\n        border: 'none',\n        display: 'flex',\n        justifyContent,\n        margin: 0,\n        overflow: 'hidden',\n        padding: 0,\n      }}\n    >\n      <div\n        ref={innerRef}\n        style={{\n          transform: `scale(${scale})`,\n          transformOrigin: `${valign || 'center'} ${align || 'center'}`,\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nPreserveRatio.propTypes = {\n  align: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  maxHeight: PropTypes.number,\n  maxScale: PropTypes.number,\n  maxWidth: PropTypes.number,\n  safeMode: PropTypes.bool,\n  valign: PropTypes.string,\n};\n","import React, { useState } from 'react'\nimport * as PropTypes from 'prop-types'\n\nimport { PreserveRatio } from 'react-preserve-ratio'\n\ninterface Rect {\n  height: number\n  width: number\n}\n\ninterface Alignment {\n  align: string\n  valign: string\n}\n\nfunction ResizableContainer({\n  children\n}: PropTypes.InferProps<typeof ResizableContainer.propTypes>) {\n  return (\n    <div\n      style={{\n        border: '1px dotted rgba(0, 0, 0, 0.2)',\n        display: 'block',\n        height: '240px',\n        overflow: 'hidden',\n        resize: 'both',\n        width: '640px'\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nResizableContainer.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nconst App = () => {\n  const [alignment, setAlignment] = useState<Alignment>({\n    align: 'center',\n    valign: 'center'\n  })\n  const [contentResizeRect, setContentResizeRect] = useState<Rect>({\n    width: 320,\n    height: 240\n  })\n\n  return (\n    <div\n      style={{\n        margin: '1em'\n      }}\n    >\n      <h1>Examples: react-preserve-scale</h1>\n      <h2>Basic Example</h2>\n      <p>\n        Try resizing the box below and notice how content automatically scales\n        while maintaining its ratio.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Constraints Example</h2>\n      <p>\n        This time the <code>maxScale</code> option is set to <code>2</code>,\n        limiting content to 2x its initial scale.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio maxScale={2}>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n      <p>There are a few different constraint options:</p>\n      <ul>\n        <li>\n          <code>maxScale</code>: A number indicating the maximum scale for\n          content relative to their real size.\n        </li>\n        <li>\n          <code>maxHeight</code>: A number indicating the maximum height of\n          content, in pixels.\n        </li>\n        <li>\n          <code>maxWidth</code>: A number indicating the maximum width of\n          content, in pixels.\n        </li>\n      </ul>\n      <p>\n        Minimum constraints are more container-dependent an so aren't currently\n        covered by the component in favour of letting users specify their own{' '}\n        <code>min-width</code> and <code>min-height</code> on the container.\n      </p>\n\n      <h2>Content Resizing Example</h2>\n      <p>\n        Content is also automatically scaled when content dimensions change.\n      </p>\n      <p>\n        <button\n          onClick={() => setContentResizeRect({ width: 320, height: 240 })}\n        >\n          Default\n        </button>\n        <button\n          onClick={() => setContentResizeRect({ width: 480, height: 240 })}\n        >\n          Wide\n        </button>\n        <button\n          onClick={() => setContentResizeRect({ width: 240, height: 320 })}\n        >\n          Tall\n        </button>\n        |\n        <input\n          type='number'\n          max='999'\n          min='1'\n          value={contentResizeRect.width}\n          onChange={(e) =>\n            setContentResizeRect({\n              width: parseInt(e.target.value),\n              height: contentResizeRect.height\n            })\n          }\n        />\n        x\n        <input\n          type='number'\n          max='999'\n          min='1'\n          value={contentResizeRect.height}\n          onChange={(e) =>\n            setContentResizeRect({\n              width: contentResizeRect.width,\n              height: parseInt(e.target.value)\n            })\n          }\n        />\n      </p>\n      <ResizableContainer>\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: `${contentResizeRect.height}px`,\n              justifyContent: 'center',\n              transition: 'width 200ms, height 200ms',\n              width: `${contentResizeRect.width}px`\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Alignment Example</h2>\n      <p>\n        Components also support horizontal and vertical alignment via{' '}\n        <code>align</code> and <code>valign</code> respectively.\n      </p>\n      <p>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'left', valign: 'top' })}\n        >\n          ↖️\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'center', valign: 'top' })}\n        >\n          ⬆️\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'right', valign: 'top' })}\n        >\n          ↗️\n        </button>\n        <br />\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'left', valign: 'center' })}\n        >\n          ⬅️\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'center', valign: 'center' })}\n        >\n          ⏺\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'right', valign: 'center' })}\n        >\n          ➡️\n        </button>\n        <br />\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'left', valign: 'bottom' })}\n        >\n          ↙️\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'center', valign: 'bottom' })}\n        >\n          ⬇️\n        </button>\n        <button\n          className='arrow-button'\n          onClick={() => setAlignment({ align: 'right', valign: 'bottom' })}\n        >\n          ↘️\n        </button>\n      </p>\n\n      <ResizableContainer>\n        <PreserveRatio align={alignment.align} valign={alignment.valign}>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: `240px`,\n              justifyContent: 'center',\n              transition: 'width 200ms, height 200ms',\n              width: `320px`\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Safe Mode Example</h2>\n      <p>\n        If elements are resized too quickly it can result in non-user-impacting\n        errors. Where this could become a problem is if you're using a frontend\n        error tracking service it could create a lot of noise.\n      </p>\n      <p>\n        To help mitigate, there's a <code>safeMode</code> prop that introduces a\n        small amount of user-visible latency but in an attempt to reduce these\n        errors.\n      </p>\n      <p>\n        See{' '}\n        <a href='https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded'>\n          this StackOverflow thread\n        </a>{' '}\n        for more detail.\n      </p>\n      <ResizableContainer>\n        <PreserveRatio safeMode>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </ResizableContainer>\n\n      <h2>Window Scaling Example</h2>\n      <p>\n        A typical use case is having content scale to fill the current window,\n        for example when displaying a slide as part of a slide show.\n      </p>\n      <p>\n        The box below should scale to match the window size. Try resizing your\n        window (or rotating your device) and see how the inner content scales to\n        fit.\n      </p>\n      <div\n        style={{\n          border: '1px dotted rgba(0, 0, 0, 0.2)',\n          height: 'calc(100vh - 2em)',\n          width: '100%'\n        }}\n      >\n        <PreserveRatio>\n          <div\n            style={{\n              alignItems: 'center',\n              backgroundColor: '#ffffdd',\n              display: 'flex',\n              height: '240px',\n              justifyContent: 'center',\n              width: '320px'\n            }}\n          >\n            Hello, world!\n          </div>\n        </PreserveRatio>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}